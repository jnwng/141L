// program 3

// NOTES
//Given array memory locations: 128 - 64
//Hash table memory locations: 0 - 64
//Hash table: 0 offset = key, 1 offset = value
//Global (before end label):
//$s0 = current place in hash table (the end of it)
//$s1 = current index (address) in the array
//Loop_hash:
//$t1 = current loop index
//$c1 = current hash table index
//$c2 = end of hash table (address)
//end:
//$t3 = greatest so far
//$t1 = current index in hash table (address)
//$c2 = end of the hash table
//Global (after end label):
//$s0 = current place in hash table (the end of it)
//$s1 = the number occuring the most

// The Setup
res 0
cpout $s0                                                                          # $s0 will be our current index in the hash table
res 128
cpout $s1                                                                          # s1 will be our current index in the array of integers

// loop through the array
loop:
res 64
cpin $c1                                                                           # This is the address of the end of our array
cpin $s1
cpout $c2                                                                          # This is the current address we are iterating on
res end
branch 1                                                                           # if we are currently at the last index in the array
                                                                                   # we branch to end
// check if the number is in our hash table
res loophashsetup
cpout $t0
jump $t0

loophashsetup:
res 0
cpout $t1                                                                          # this will be our placeholder for this loops place in the hash table
loophash:
// compare the edge of our hash table, to our current place in the loop
cpin $s0
cpout $c1
cpin $t1
cpout $c1
res new_entry                                                                      # If we have finished searching the hash table, we create a new entry
branch 1
// we compare the entry in our hash table ($t1) to the array value passed in ($s1)
cpin $s1
load $c1
cpin $t1
load $c2
res increment
branch 1
res 2                                                                              # change our place in the hash table
add $t1
cpout $t1
// else, continue the loop
res loophash
cpout $t0
jump $t0


new_entry:
cpin $s1                                                                           # res is now the address of the current array value
load $t1                                                                           # t1 is the value of our current int
res $c1
store $t1                                                                          # store the index at the end of the hash table
res 0
cpout $t2                                                                          # t2 = 0
res 1
add $c1
store $t2                                                                          # we have now stored the value 0 next to the key
res 2
add $c1                                                                            # create a new index / end of hash table
cpout $s0                                                                          # this is the new end of the hash table
res 2
// NEED TO SUBTRACT HERE!
add 0, $s1
cpout $s1                                                                          # we are not on the next index of the array
res loop
jump loop

increment:
res 1
add $t1                                                                            # current place in hash table
cpout $t3
load $t2                                                                           # $t1 is the value of our hash key
res 1
add $t2                                                                            # increment that value by 1
cpout $t2
cpin $t3
store $t2                                                                          # store that as the new value
res 2
// NEED TO SUBTRACT HERE!
add 0, $s1
cpout $s1                                                                          # we are not on the next index of the array
res loop
jump loop

end:
// $s1 = number occuring the most
res 0
cpout $t3                                                                          # this will keep track of our greatest occurance
res 1
cpout $t1                                                                          # this will keep track of our hash table index

loop_highest:
// if we hit the end of our hash table then we return what is in $s1
cpin $s0
cpout $c1
cpin $t1
cpout $c2
res return
branch 1
// else we compare the value of the current key to see if it occurs more
cpin $t1
load $c1
cpin $t3
load $c2
res gt
// if the new value is greater than the current one, store it
branch 0, 2
// if it is equal, store the bigger one
res tie
branch 1
// else, run through loop again
res 2
add $t1
cpout $t1                                                                          # move onto the next hash table value
res loop_highest
cpout $t0
jump $t0


gt:
// save the new highest one
cpin $c1
cpout $t3
res 1
// NEED TO SUBTRACT HERE
add 0, $t1
load $s1                                                                           # this is the number occuring the most times
res 2
add $t1
cpout $t1                                                                          # move onto the next hash table value
res loop_highest
cpout $t0
jump $t0

tie:
res 1
// NEED TO SUBTRACT HERE
add 0, $t1
load $c0                                                                           # c1 is the key of this hash entry
cpin $s1                                                                           # this is currently out winning key
cpout $c1
res num1
branch 0, 2                                                                        # if c1 > c2, set $s1 to $c1
res num2
cpout $t0
jump $t0
num1:
cpin $c1
cpout $s1
num2:
cpin $c2
cpout $s1
res 2
add $t1
cpout $t1                                                                          # move onto the next hash table value
res loop_highest
cpout $t0
jump $t0

return:
cpin $s1
cpout $s0
halt

